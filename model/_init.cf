entity YCSB extends ip::services::Server:
    """The general YCSB, single"""
    string directory = "/home/ec2-user/ycsb"
    string table = "usertable"
end

YCSB ycsb [0:] -- [0:1] mongodb::MongoDBShardCluster mongodb
YCSB ycsb [0:] -- [0:1] mongodb::MongoDBReplicaSet mongodbConsistency
YCSB ycsb [0:] -- [0:1] postgresql::PgpoolMain postgresql
YCSB ycsb [0:] -- [0:1] hbase::HBaseCluster hbase

implement YCSB using ycsb

implement YCSB using ycsb-mongodb
implement YCSB using ycsb-postgresql
implement YCSB using ycsb-hbase


implementation ycsb:
    git = std::Package(host = host, name = "git", state = "installed")
    
    maven = std::Package(host = host, name = "maven", state = "installed")
    
    basedir = std::Directory(host = host, path = directory, owner = "root", group = "root", mode = 755, reload = true)
    configdir = std::Directory(host = host, path = "{{directory}}/config", owner = "root", group = "root", mode = 755, reload = true, requires = basedir)
	scriptDir = std::Directory(host = host, path = "{{directory}}/script", owner = "root", group = "root", mode = 755, reload = true, requires = basedir)
	
    
    scriptFile = std::File(host = host, path = "/usr/bin/ycsb-install",owner = "root",
        group = "root", mode = 755,  content = template("ycsb/ycsb-install.sh.tmpl"), reload = true)
    
    serviceFile = std::File(host = host, path = "/lib/systemd/system/ycsb-install.service",owner = "root",
        group = "root", mode = 755,  content = file("ycsb/ycsb-install.service"), reload = true)
    
    workloadFile = std::File(host = host, path = "{{directory}}/config/workload-ycsb-thomas",owner = "root",
        group = "root", mode = 755,  content = file("ycsb/workload-ycsb-thomas"), reload = true)
    workloadFile.requires = configdir
    
    workloadFileCont = std::File(host = host, path = "{{directory}}/config/workload-ycsb-thomas-continuous",owner = "root",
        group = "root", mode = 755,  content = file("ycsb/workload-ycsb-thomas-continuous"), reload = true)
    workloadFileCont.requires = configdir
    
    workloadFileStress = std::File(host = host, path = "{{directory}}/config/workload-ycsb-thomas-stress-load",owner = "root",
        group = "root", mode = 755,  content = file("ycsb/workload-ycsb-thomas-stress-load"), reload = true)
    workloadFileStress.requires = configdir
    
    workloadConsistency = std::File(host = host, path = "{{directory}}/config/workload-ycsb-thomas-consistency",owner = "root",
        group = "root", mode = 755,  content = file("ycsb/workload-ycsb-thomas-consistency"), reload = true)
    workloadConsistency.requires = configdir
    
    workloadConsistencyRun = std::File(host = host, path = "{{directory}}/config/workload-ycsb-thomas-consistency-run",owner = "root",
        group = "root", mode = 755,  content = template("ycsb/workload-ycsb-thomas-consistency-run.tmpl"), reload = true)
    workloadConsistencyRun.requires = configdir
    
    workloadLoad = std::File(host = host, path = "{{directory}}/config/workload-ycsb-thomas-load",owner = "root",
        group = "root", mode = 755,  content = file("ycsb/workload-ycsb-thomas-load"), reload = true)
    workloadLoad.requires = configdir
    
    service = std::Service(host = host, name = "ycsb-install", state = "running", onboot = false)
    service.requires = [git, maven, basedir, scriptFile, serviceFile]    
    
    benchScript= std::File(host = host, path = "{{directory}}/script/ycsb-script", content = template("ycsb/ycsb-script.sh.tmpl"), reload = true,
    			owner = "root", group = "root", mode = 755)
    benchScript.requires = scriptDir
end

implementation ycsb-mongodb:
    mongoDBBasic = mongodb::MongoDB(host = self.host)
    basedir = std::Directory(host = host, path = "/tmp/mongo", owner = "root", group = "root", mode = 755, reload = true)
    
    configFile= std::ConfigFile(host = host, path = "{{directory}}/config/mongodb.conf", content = template("ycsb/mongodb.conf.tmpl"), reload = true)
    configFile.requires = std::Directory[host = host, path = "{{directory}}/config"]
    
    deleteFile= std::File(host = host, path = "{{directory}}/script/mongodb-delete", content = template("ycsb/mongodb-delete.sh.tmpl"), reload = true,
    			owner = "root", group = "root", mode = 755)
    deleteFile.requires = std::Directory[host = host, path = "{{directory}}/script"]
    
    hardFile= std::File(host = host, path = "{{directory}}/script/mongodb-remote-hard-stop", content = file("ycsb/mongodb-remote-hard-stop.sh"), reload = true,
    			owner = "root", group = "root", mode = 755)
    hardFile.requires = std::Directory[host = host, path = "{{directory}}/script"]
    
    
    softFile= std::File(host = host, path = "{{directory}}/script/mongodb-remote-soft", content = file("ycsb/mongodb-remote-soft.sh"), reload = true,
    			owner = "root", group = "root", mode = 755)
    softFile.requires = std::Directory[host = host, path = "{{directory}}/script"]
    
    eventGenerator= std::File(host = host, path = "{{directory}}/script/mongodb-event-generator", content = template("ycsb/mongodb-event-xml-generator.sh.tmpl"), reload = true,
    			owner = "root", group = "root", mode = 755)
    eventGenerator.requires = std::Directory[host = host, path = "{{directory}}/script"]
    
    benchScript= std::File(host = host, path = "{{directory}}/script/mongodb-script", content = template("ycsb/mongodb-script.sh.tmpl"), reload = true,
    			owner = "root", group = "root", mode = 755)
    benchScript.requires = eventGenerator
    
    ##Consistency
    configFileConsistency= std::ConfigFile(host = host, path = "{{directory}}/config/mongodb-consistency.conf", content = template("ycsb/mongodb-consistency.conf.tmpl"), reload = true)
    configFileConsistency.requires = std::Directory[host = host, path = "{{directory}}/config"]
    
    deleteFileConsistency= std::File(host = host, path = "{{directory}}/script/mongodb-delete-consistency", content = template("ycsb/mongodb-delete-consistency.sh.tmpl"), reload = true,
    			owner = "root", group = "root", mode = 755)
    deleteFileConsistency.requires = std::Directory[host = host, path = "{{directory}}/script"]
    
    benchScriptConsistency= std::File(host = host, path = "{{directory}}/script/mongodb-script-consistency", content = template("ycsb/mongodb-script-consistency.sh.tmpl"), reload = true,
    			owner = "root", group = "root", mode = 755)
    benchScriptConsistency.requires = std::Directory[host = host, path = "{{directory}}/script"]
end

implementation ycsb-postgresql:
    postgresBasic = postgresql::PostgresqlBasic(host = self.host)
    
    wget = std::Package(host = host, name = "wget", state = "installed")
    
    configFile= std::ConfigFile(host = host, path = "{{directory}}/config/postgresql.conf", content = template("ycsb/postgresql.conf.tmpl"), reload = true)
	configFile.requires = std::Directory[host = host, path = "{{directory}}/config"]
    scriptFile = std::File(host = host, path = "/usr/bin/ycsb-postgresql-jdbc-install",owner = "root",
        group = "root", mode = 755,  content = template("ycsb/ycsb-postgresql-jdbc-install.sh.tmpl"), reload = true)
    
    serviceFile = std::File(host = host, path = "/lib/systemd/system/ycsb-postgresql-jdbc-install.service",owner = "root",
        group = "root", mode = 755,  content = file("ycsb/ycsb-postgresql-jdbc-install.service"), reload = true)
    
    service = std::Service(host = host, name = "ycsb-postgresql-jdbc-install", state = "running", onboot = false)
    service.requires = [wget, scriptFile, serviceFile]    
    
    service.requires = std::Service[host = host, name = "ycsb-install"]
    
    deleteFile= std::File(host = host, path = "{{directory}}/script/postgresql-delete", content = template("ycsb/postgresql-delete.sh.tmpl"), reload = true,
    			owner = "root", group = "root", mode = 755)
    deleteFile.requires = std::Directory[host = host, path = "{{directory}}/script"]
    
    hardFile= std::File(host = host, path = "{{directory}}/script/postgresql-remote-hard-stop", content = template("ycsb/postgresql-remote-hard-stop.sh.tmpl"), reload = true,
    			owner = "root", group = "root", mode = 755)
    hardFile.requires = std::Directory[host = host, path = "{{directory}}/script"]
    
    
    softFile= std::File(host = host, path = "{{directory}}/script/postgresql-remote-soft", content = file("ycsb/postgresql-remote-soft.sh"), reload = true,
    			owner = "root", group = "root", mode = 755)
    softFile.requires = std::Directory[host = host, path = "{{directory}}/script"]
    
    
    remoteFile= std::File(host = host, path = "{{directory}}/script/postgresql-remote-recover", content = template("ycsb/postgresql-remote-recover.sh.tmpl"), reload = true,
    			owner = "root", group = "root", mode = 755)
    remoteFile.requires = std::Directory[host = host, path = "{{directory}}/script"]
    
    eventGenerator= std::File(host = host, path = "{{directory}}/script/postgresql-event-generator", content = template("ycsb/postgresql-event-xml-generator.sh.tmpl"), reload = true,
    			owner = "root", group = "root", mode = 755)
    eventGenerator.requires = std::Directory[host = host, path = "{{directory}}/script"]
    
    	benchScript= std::File(host = host, path = "{{directory}}/script/postgresql-script", content = template("ycsb/postgresql-script.sh.tmpl"), reload = true,
    			owner = "root", group = "root", mode = 755)
    benchScript.requires = eventGenerator
    
end

implementation ycsb-hbase:
    hbaseBasic = hbase::HBaseBasic(host = self.host)
    
    configFile= std::ConfigFile(host = host, path = "{{directory}}/config/hbase.conf", content = template("ycsb/hbase.conf.tmpl"), reload = true)
	configFile.requires = std::Directory[host = host, path = "{{directory}}/config"]
    configFile2 = std::ConfigFile(host = host, path = "{{directory}}/YCSB/hbase/src/main/conf/hbase-site.xml", 
                                  content = template("ycsb/hbase-site.xml.tmpl"), reload = true)
   	configFile2.requires = std::Service[host = host, name = "ycsb-install"]
    
    
    deleteFile= std::File(host = host, path = "{{directory}}/script/hbase-delete", content = template("ycsb/hbase-delete.sh.tmpl"), reload = true,
    			owner = "root", group = "root", mode = 755)
    deleteFile.requires = std::Directory[host = host, path = "{{directory}}/script"]
    
    hardFile= std::File(host = host, path = "{{directory}}/script/hbase-remote-hard-stop", content = file("ycsb/hbase-remote-hard-stop.sh"), reload = true,
    			owner = "root", group = "root", mode = 755)
    hardFile.requires = std::Directory[host = host, path = "{{directory}}/script"]
    
    
    softFile= std::File(host = host, path = "{{directory}}/script/hbase-remote-soft", content = file("ycsb/hbase-remote-soft.sh"), reload = true,
    			owner = "root", group = "root", mode = 755)
    softFile.requires = std::Directory[host = host, path = "{{directory}}/script"]
    
    eventGenerator= std::File(host = host, path = "{{directory}}/script/hbase-event-generator", content = template("ycsb/hbase-event-xml-generator.sh.tmpl"), reload = true,
    			owner = "root", group = "root", mode = 755)
    eventGenerator.requires = std::Directory[host = host, path = "{{directory}}/script"]

	benchScript= std::File(host = host, path = "{{directory}}/script/hbase-script", content = template("ycsb/hbase-script.sh.tmpl"), reload = true,
    			owner = "root", group = "root", mode = 755)
    benchScript.requires = eventGenerator
    
    consistencyScript= std::File(host = host, path = "{{directory}}/script/hbase-script-consistency", content = template("ycsb/hbase-script-consistency.sh.tmpl"), reload = true,
    			owner = "root", group = "root", mode = 755)
    consistencyScript.requires = std::Directory[host = host, path = "{{directory}}/script"]
    
end
